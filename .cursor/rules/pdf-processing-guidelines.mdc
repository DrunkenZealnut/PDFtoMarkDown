---
description:
globs:
alwaysApply: false
---
# PDF 처리 가이드라인 및 모범 사례

## PDF 파일 처리 원칙

### 1. 다양한 PDF 형식 지원
- **텍스트 기반 PDF**: 검색 가능한 텍스트가 포함된 일반적인 PDF
- **이미지 기반 PDF**: 스캔된 문서나 이미지로만 구성된 PDF
- **하이브리드 PDF**: 텍스트와 이미지가 혼재된 PDF
- **암호화된 PDF**: 비밀번호로 보호된 PDF (읽기 전용 처리)

### 2. 텍스트 추출 전략
```python
# 기본 텍스트 추출 순서
1. pymupdf로 1차 텍스트 추출
2. 빈 텍스트인 경우 OCR 처리 고려
3. pdfplumber로 테이블 구조 분석
4. 폰트 정보 기반 구조 분석
```

### 3. 구조 분석 기준

#### 제목 인식 기준
- **폰트 크기**: 본문보다 1.2배 이상 큰 텍스트
- **폰트 스타일**: Bold, 이탤릭체 여부
- **위치**: 페이지 상단이나 별도 줄에 위치
- **길이**: 일반적으로 한 줄 이내

#### 리스트 항목 인식
- **불릿 포인트**: •, -, *, ○ 등의 기호
- **번호 매김**: 1., 2., (1), a), i) 등
- **들여쓰기**: 본문 대비 들여쓰기된 텍스트

#### 테이블 처리
- **셀 경계**: 명확한 경계선이 있는 구조
- **정렬**: 컬럼 기준으로 정렬된 데이터
- **헤더**: 첫 번째 행의 볼드체 또는 배경색

## 에러 처리 및 예외 상황

### 1. 파일 접근 에러
```python
# 파일 권한, 암호화, 손상된 파일 등
try:
    doc = fitz.open(pdf_path)
except Exception as e:
    logging.error(f"PDF 파일 열기 실패: {e}")
    raise PDFProcessingError(f"파일을 열 수 없습니다: {pdf_path}")
```

### 2. 메모리 관리
- **대용량 PDF**: 페이지별 순차 처리
- **이미지 최적화**: 압축 및 리사이징
- **리소스 해제**: 명시적인 close() 호출

### 3. 성능 최적화
```python
# 병렬 처리 가능한 작업들
- 페이지별 텍스트 추출
- 이미지 저장 및 최적화
- 여러 PDF 파일 일괄 처리
```

## Markdown 변환 규칙

### 1. 텍스트 변환 매핑
```python
# 구조 요소별 Markdown 문법
제목 레벨 1: # 
제목 레벨 2: ## 
제목 레벨 3: ### 
본문: 일반 텍스트 + 빈 줄
리스트: - 또는 1.
강조: **bold**, *italic*
코드: `inline` 또는 ```block```
```

### 2. 특수 요소 처리
- **페이지 번호**: 제거 또는 주석으로 처리
- **헤더/푸터**: 반복되는 내용 제거
- **각주**: [^1] 형식으로 변환
- **하이퍼링크**: [텍스트](URL) 형식 유지

### 3. 이미지 처리
```python
# 이미지 추출 및 링크 생성
1. PDF에서 이미지 추출
2. images/ 폴더에 저장
3. Markdown에 ![alt](images/image_001.png) 링크 삽입
```

## 설정 가능한 옵션들

### 1. 변환 옵션
```python
# config.py에서 관리할 설정들
TITLE_FONT_THRESHOLD = 1.2      # 제목 인식 폰트 크기 비율
EXTRACT_IMAGES = True            # 이미지 추출 여부
PRESERVE_FORMATTING = True       # 원본 서식 유지 여부
MERGE_PARAGRAPHS = False         # 단락 병합 여부
TABLE_DETECTION = True           # 테이블 자동 인식
```

### 2. 출력 형식 옵션
```python
OUTPUT_ENCODING = 'utf-8'        # 출력 파일 인코딩
LINE_ENDING = '\n'               # 줄바꿈 문자
INDENT_SIZE = 2                  # 들여쓰기 크기
IMAGE_FORMAT = 'png'             # 이미지 저장 형식
```

## 품질 검증 기준

### 1. 변환 품질 체크리스트
- [ ] 원본 구조가 적절히 보존되었는가?
- [ ] 제목 레벨이 올바르게 설정되었는가?
- [ ] 리스트 항목이 정확히 변환되었는가?
- [ ] 테이블이 읽기 가능한 형태로 변환되었는가?
- [ ] 이미지가 적절한 위치에 삽입되었는가?

### 2. 자동화된 검증
```python
# 변환 후 자동 검증 항목들
1. 빈 제목이나 내용 확인
2. 중복된 이미지 링크 제거
3. 깨진 Markdown 문법 수정
4. 불필요한 빈 줄 정리
```

## 참조 파일들
메인 구현은 [pdf_reader.py](mdc:pdf_reader.py)와 [text_parser.py](mdc:text_parser.py)에서 관리하며, 설정값들은 [config.py](mdc:config.py)에서 중앙 관리합니다.
