---
description:
globs:
alwaysApply: false
---
# 코딩 표준 및 품질 가이드라인

## Python 코딩 스타일

### 1. PEP 8 준수
- 라인 길이: 최대 88자 (Black 포맷터 기준)
- 들여쓰기: 스페이스 4개
- 함수/변수명: snake_case
- 클래스명: PascalCase
- 상수명: UPPER_SNAKE_CASE

### 2. 타입 힌트 (Type Hints)
```python
# 모든 함수에 타입 힌트 필수
from typing import List, Dict, Optional, Union
from pathlib import Path

def extract_text_from_page(page: fitz.Page) -> str:
    """페이지에서 텍스트를 추출합니다."""
    return page.get_text()

def process_pdf_file(
    pdf_path: Path, 
    output_dir: Optional[Path] = None
) -> Dict[str, Union[str, List[str]]]:
    """PDF 파일을 처리하여 Markdown으로 변환합니다."""
    pass
```

### 3. Docstring 작성 (Google 스타일)
```python
def analyze_document_structure(text_blocks: List[Dict]) -> Dict[str, List]:
    """문서 구조를 분석하여 제목, 본문, 리스트를 분류합니다.
    
    Args:
        text_blocks: PDF에서 추출된 텍스트 블록들의 리스트
            각 블록은 {'text': str, 'font_size': float, 'bbox': tuple} 형태
    
    Returns:
        Dict containing:
            - 'headings': 제목들의 리스트
            - 'paragraphs': 본문 단락들의 리스트  
            - 'lists': 리스트 항목들의 리스트
    
    Raises:
        ValueError: text_blocks가 비어있거나 잘못된 형식일 때
        
    Example:
        >>> blocks = [{'text': '제목', 'font_size': 16, 'bbox': (0,0,100,20)}]
        >>> result = analyze_document_structure(blocks)
        >>> print(result['headings'])
        ['제목']
    """
    pass
```

## 에러 처리 및 예외 관리

### 1. 커스텀 예외 클래스
```python
# exceptions.py 파일에서 정의
class PDFProcessingError(Exception):
    """PDF 처리 관련 에러"""
    pass

class MarkdownConversionError(Exception):
    """Markdown 변환 관련 에러"""
    pass

class FileNotFoundError(PDFProcessingError):
    """파일을 찾을 수 없을 때"""
    pass

class UnsupportedFormatError(PDFProcessingError):
    """지원하지 않는 PDF 형식일 때"""
    pass
```

### 2. 에러 처리 패턴
```python
# 명시적인 에러 처리
def open_pdf_document(file_path: Path) -> fitz.Document:
    """PDF 문서를 안전하게 엽니다."""
    try:
        if not file_path.exists():
            raise FileNotFoundError(f"파일이 존재하지 않습니다: {file_path}")
            
        doc = fitz.open(str(file_path))
        
        if doc.page_count == 0:
            raise UnsupportedFormatError("빈 PDF 파일입니다")
            
        return doc
        
    except fitz.fitz.FileDataError as e:
        raise UnsupportedFormatError(f"손상된 PDF 파일: {e}")
    except Exception as e:
        raise PDFProcessingError(f"PDF 파일 열기 실패: {e}")
```

### 3. 리소스 관리 (Context Manager)
```python
from contextlib import contextmanager
from typing import Generator

@contextmanager
def pdf_document(file_path: Path) -> Generator[fitz.Document, None, None]:
    """PDF 문서를 안전하게 열고 자동으로 닫습니다."""
    doc = None
    try:
        doc = open_pdf_document(file_path)
        yield doc
    finally:
        if doc:
            doc.close()

# 사용 예시
with pdf_document(pdf_path) as doc:
    # PDF 처리 작업
    pass
```

## 로깅 시스템

### 1. 로깅 설정
```python
# utils.py에서 로깅 설정
import logging
from pathlib import Path

def setup_logging(log_level: str = "INFO", log_file: Optional[Path] = None):
    """로깅 시스템을 설정합니다."""
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    handlers = [logging.StreamHandler()]
    if log_file:
        handlers.append(logging.FileHandler(log_file))
    
    logging.basicConfig(
        level=getattr(logging, log_level.upper()),
        format=log_format,
        handlers=handlers
    )
```

### 2. 로깅 사용 패턴
```python
import logging

logger = logging.getLogger(__name__)

class PDFReader:
    def extract_text(self, page_num: int) -> str:
        """페이지에서 텍스트를 추출합니다."""
        logger.info(f"페이지 {page_num} 텍스트 추출 시작")
        
        try:
            text = self._do_extract_text(page_num)
            logger.debug(f"추출된 텍스트 길이: {len(text)} 문자")
            return text
            
        except Exception as e:
            logger.error(f"페이지 {page_num} 텍스트 추출 실패: {e}")
            raise
```

## 테스트 작성 가이드라인

### 1. 단위 테스트 구조
```python
# tests/test_pdf_reader.py
import pytest
from pathlib import Path
from unittest.mock import Mock, patch

from pdf_to_markdown.pdf_reader import PDFReader
from pdf_to_markdown.exceptions import PDFProcessingError

class TestPDFReader:
    @pytest.fixture
    def sample_pdf_path(self) -> Path:
        """테스트용 PDF 파일 경로를 반환합니다."""
        return Path("test_files/sample.pdf")
    
    @pytest.fixture
    def pdf_reader(self) -> PDFReader:
        """PDFReader 인스턴스를 생성합니다."""
        return PDFReader()
    
    def test_extract_text_success(self, pdf_reader, sample_pdf_path):
        """정상적인 텍스트 추출 테스트"""
        result = pdf_reader.extract_text(sample_pdf_path)
        assert isinstance(result, str)
        assert len(result) > 0
    
    def test_extract_text_file_not_found(self, pdf_reader):
        """존재하지 않는 파일 처리 테스트"""
        with pytest.raises(FileNotFoundError):
            pdf_reader.extract_text(Path("nonexistent.pdf"))
```

### 2. 테스트 데이터 관리
```python
# conftest.py - pytest 설정
import pytest
from pathlib import Path

@pytest.fixture(scope="session")
def test_data_dir() -> Path:
    """테스트 데이터 디렉토리 경로를 반환합니다."""
    return Path(__file__).parent / "test_data"

@pytest.fixture
def sample_text_blocks():
    """테스트용 텍스트 블록 데이터를 반환합니다."""
    return [
        {"text": "제목 1", "font_size": 16, "bbox": (0, 0, 100, 20)},
        {"text": "본문 내용입니다.", "font_size": 12, "bbox": (0, 25, 200, 40)},
        {"text": "• 리스트 항목", "font_size": 12, "bbox": (10, 45, 150, 60)}
    ]
```

## 코드 품질 도구

### 1. 정적 분석 도구
```bash
# requirements-dev.txt
black==23.7.0          # 코드 포맷터
isort==5.12.0          # import 정렬
flake8==6.0.0          # 린터
mypy==1.5.1            # 타입 체커
pytest==7.4.0         # 테스트 프레임워크
pytest-cov==4.1.0     # 커버리지 측정
```

### 2. pre-commit 훅 설정
```yaml
# .pre-commit-config.yaml
repos:
  - repo: https://github.com/psf/black
    rev: 23.7.0
    hooks:
      - id: black
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
```

## 성능 최적화 가이드라인

### 1. 메모리 효율성
```python
# 제너레이터 사용으로 메모리 절약
def process_pages_generator(doc: fitz.Document):
    """페이지를 하나씩 처리하여 메모리 사용량을 줄입니다."""
    for page_num in range(doc.page_count):
        page = doc[page_num]
        yield process_single_page(page)
        # 페이지 처리 후 즉시 메모리에서 해제
```

### 2. 캐싱 전략
```python
from functools import lru_cache

@lru_cache(maxsize=128)
def get_font_info(font_name: str, font_size: float) -> Dict[str, Any]:
    """폰트 정보를 캐시하여 반복 계산을 방지합니다."""
    return analyze_font_properties(font_name, font_size)
```

## 참조 파일들
메인 실행 파일은 [main.py](mdc:main.py)이며, 설정 관리는 [config.py](mdc:config.py)에서 담당합니다. 유틸리티 함수들은 [utils.py](mdc:utils.py)에서 관리합니다.
